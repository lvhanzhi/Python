生成器:
大前提：生成器就是一种自定义的迭代器，本质就是迭代器
但凡函数内包含yield关键字，调用函数不会执行函数体代码，会得到一个返回值，该返回值就是生成器对象
def func():
    print('first')
    yield 1
    print('second')
    yield 2
    print('third')
    yield 3
    print('fourth')
func=func()
for i in func:
    print(i)

#用生成器写一个range:
def my_range(start,end,step=1):
    while start < end:
        yield start
        start += step
my_range=my_range(1,11)+

for i in my_range:
    print(i)
# 了解（*）：yield的表达式形式的应用: x=yield
def dog(name):
    print('%s准备开吃'%name)
    while True:
        food=yield
        print('%s正在吃%s'%(name,food))
dog=dog('alex')
dog.__next__()#强调：针对表达式形式的yield的使用，第一步必须让函数先暂停到一个yield的位置，才能进行传值操作
dog.send('包子')#1. 先为当前暂停位置的yield赋值 2. next(生成器)直到再次碰到一个yield停下来，然后其的值当做本次next的结果

# 总结yield:只能在函数内使用
#1. yield提供了一种自定义迭代器的解决方案
#2. yield可以保存函数的暂停的状态
#3. yield对比return
#   1. 相同点：都可以返回值，值的类型与个数都没有限制
#   2. 不同点：yield可以返回多次值，而return只能返回一次值函数就结束了

#生成器表达式:
g=(i**2 for i in range(1,6) if i>3)
for i in g:
    print(i)

#统计文件中字符的个数:
with open('db.txt','r',encoding='utf8')as f:
    print(sum((len(line)for line in f)))

面试题:
#c
def add(n,i):
    return n+i

def test():
    for i in range(4):
        yield i

g=test()
for n in [1,10]:
    g=(add(n,i) for i in g)
res=list(g)
for i in res:
    print(i)
"""
res=list(g)
g=test()-->(i for i in range(4))
n=1-->g=(add(n,i) for i in (i for i in range(4)))
n=10-->g=(add(n,i) for i in (add(n,i) for i in (i for i in range(4))))
g=(add(n,i) for i in (add(n,i) for i in (i for i in range(4))))
n=10
(add(10,i) for i in (add(10,i) for i in (i for i in range(4)))) -->20
(add(10,i) for i in (i for i in range(4)))-->10
(i for i in range(4))-->i=0
"""
#A. res=[10,11,12,13]
#B. res=[11,12,13,14]
#C. res=[20,21,22,23]
#D. res=[21,22,23,24]

#内置函数
#abs()绝对值:
print(abs(-1))#1

#all()用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。
print(all([]))#True
print(all([1,2,3]))#True
print(all(['',0,None]))#False

#any()判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True
print(any([]))#False
print(any(['']))#False
print(any([1,0]))#False

#bin()返回一个整数 int 或者长整数 long int 的二进制表示。
print(bin(10))#0b1010

#bool()函数用于将给定参数转换为布尔类型，如果没有参数，返回 False。
print(bool(0))#False
print(bool(1))#True

#chr() 用一个范围在 range（256）内的（就是0～255）整数作参数，返回一个对应的字符。
print(chr(65))#A
print(chr(90))#Z
print(chr(97))#a
print(chr(122))#z

#ord()ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr() 函数（对于Unicode对象）的配对函数，它以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的 Python 定义范围，则会引发一个 TypeError 的异常。
#也就是和chr反着来
print(ord('a'))#97

#callable() 函数用于检查一个对象是否是可调用的。如果返回True，object仍然可能调用失败；但如果返回False，调用对象ojbect绝对不会成功。
print(callable(len))

#dir() 函数不带参数时，返回当前范围内的变量、方法和定义的类型列表；带参数时，返回参数的属性、方法列表。
import time
print(dir(time))#返回它的一些方法

#divmod() 函数把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a // b, a % b)。
print(divmod(3003,20))#计算分页

fs=frozenset({1,2,3})#生成一个不可变的集合

#reversed 函数返回一个反转的迭代器。
l=[1,2,3]
l=reversed(l)
print(list(l))

#reverse() 函数用于反向列表中元素。
l=[1,2,3]
l.reverse()
print(l)

#round()四舍五入
print(round(1.5))#2
print(round((0.1)))#0

#slice() 函数实现切片对象，主要用在切片操作函数里的参数传递。
l=['a','b','c','d','e']
s='helloworld'
obj=slice(1,5,2)
print(l[obj])#['b', 'd']

#locals() 函数会以字典类型返回当前位置的全部局部变量。
print(vars() is locals())#True
print(locals())#{'__name__': '__main__', '__doc__': ...

#vars() 函数返回对象object的属性和属性值的字典对象。
print(vars())#{'__name__': '__main__', '__doc__': ...

import time
print(time)#<module 'time' (built-in)>
m=__import__('time')
print(m.time)#<built-in function time>



# 面向对象
object.__dict__

classmethod
staticmethod
property

delattr
hasattr
getattr
setattr

isinstance
issubclass

object

super


面向过程编程
    核心是过程二字,过程指的就是解决问题的步骤,即先干什么再干什么后干什么...
    基于该思想编写程序就好比在设计一条流水线,是一种机械式的思维方式

    优点:复杂的问题流程化,进而简单化
    缺点:可扩展性差

