模块:
什么是模块:模块就是一系列功能的集合体
模块有三种来源:1. 内置的模块/2. 第三方的模块/3. 自定义模块
模块的格式:
    1 使用python编写的.py文件
　　2 已被编译为共享库或DLL的C或C++扩展
　　3 把一系列模块组织到一起的文件夹（注：文件夹下有一个__init__.py文件，该文件夹称之为包）
　　4 使用C编写并链接到python解释器的内置模块
为何要用模块:
    1. 使用内置的或者第三方模块的好处是: 拿来主义,可以极大提升开发效率
    2. 使用自定义模块的好处是: 可以减少代码冗余(抽取我们自己程序中要公用的一些功能定义成模块,然后程序的各部分组件都去模块中调用共享的功能)
如何用模块
    大前提: 一定要区分开谁是执行文件,谁是被导入模块
import...
首次导入模块发生几件事?
    1. 会产生一个模块的名称空间
    2. 执行文件spam.py,将执行过程中产生的名字都放到模块的名称空间中
    3. 在当前执行文件的名称空间中拿到一个模块名,该名字指向模块的名称空间
注意:之后的导入,都是直接引用第一次导入的成果,不会重新执行文件
    (要是先调用,再修改模块里的内容,是不会有变化或者影响的.只有第二次调用重新读模块里的内容)
总结import导入模块:在使用时必须加上前缀:模块名.
    优点: 指名道姓地向某一个名称空间要名字,肯定不会与当前名称空间中的名字冲突
    缺点: 但凡应用模块中的名字都需要加前缀,不够简洁

一行导入多个模块(不推荐)
import spam,os,time

可以为模块起别名(注意:模块名应该全为小写)
import spam as sm
print(sm.money)
注意:改了之后原名就不能用了


from...import...
首次导入模块发生3件事
1. 创建一个模块的名称空间
2. 执行文件spam.py,将执行过程中产生的名字都放到模块的名称空间中
3. 在当前执行文件中直接拿到一个名字,该名字就是执行模块中相对应的名字的

总结from...import...
优点: 使用时,无需再加前缀,更简洁
缺点: 容易与当前名称空间中的名字冲突

起别名
from spam import read1 as r1
注意:改了之后原名就不能用了

导入模块用from test import *时,_开头的变量不能被调用
名字加下划线,是私有的
但是可以用__all__ = ['money','read1'](写在模块里)的方式,就可以在运行的py文件里访问到这个变量
注意里面有的就能被调用,里面没有的(模块里有)不能被调用
# *代表不包含_开头的所有名字（不推荐使用）
#本质就是导入模块中的__all__
#__all__可以自定义,存放让被导出的名字(可以包含_开头的名字)
# from spam import money,read1,read2,change
# from spam import * # __all__ = ['money','read1'](__all__写到模块里面,表示这些是可调用的)