subprocess模块
    sub(子)process(进程)
    进程:正在进行中的程序   每当打开一个程序就会开启一个进程
        每个进程包含运行程序所需的所有资源
        正常情况下 不可以跨进程访问数据
        但是有些情况写就需要访问别的进程数据   提供一个叫做管道的对象 专门用于跨进程通讯

    就像是使用cmd一样执行系统命令
        三种执行命令的方法
            run     返回一个表示执行结果的对象 #官方推荐
            call    返回的执行的状态码 #跟上面实现的内容差不多，另一种写法
            Popen   #上面各种方法的底层封装
        import subprocess
        res=subprocess.run('tasklist',shell=True,stdout=subprocess.PIPE)#返回一个表示执行结果的对象
        print(res.stdout.decode('gbk'))
        res=subprocess.call('tasklist',shell=True)# 返回的执行的状态码
        print(res)

        总结  subprocess的好处是可以获取指令的执行结果
              subprocess执行指令时 可以在子进程中 这样避免造成主进程卡死
os的做法,直接打印到终端
    import os
    os.system('tasklist')

import subprocess
obj=subprocess.Popen(#相当于开启了一个子进程(子进程和父进程互不干扰)
    'tasklist',#命令
    shell=True,#相当于调了一个shell命令解释器
    stdout=subprocess.PIPE,#命令正常运行的结果 往管道丢
    stderr=subprocess.PIPE#命令出错运行的结果
    #调用了两个管道
)
stdout_res=obj.stdout.read()#从正确的管道里拿结果
print(stdout_res.decode('gbk'))#拿到的是二进制,需要进行解码
