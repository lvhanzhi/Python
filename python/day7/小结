文件处理:
1 什么是文件
    文件是操作系统为用户/应用程序提供的一种操作硬盘的抽象单位
2 为何要用文件
    用户/应用程序对文件的读写操作会由操作系统转换成具体的硬盘操作
    所以用户/应用程序可以通过简单的读\写文件来间接地控制复杂的硬盘的存取操作
    实现将内存中的数据永久保存到硬盘中
    user=input('>>>>: ') #user="egon"
3 如何用文件
    文件操作的基本步骤:
        f=open(...) #打开文件,拿到一个文件对象f,f就相当于一个遥控器,可以向操作系统发送指令
         # f的值是一个文件对象
        f.read() # 读写文件,向操作系统发送读写文件指令
        f.close() # 关闭文件,回收操作系统的资源
    上下文管理:
        with open(...) as f:
            pass

r的作用:如果文件名是已n开头,会被认为是换行,加r就不会
open(r'D:\SH_fullstack_s3\day07\n.txt')

 f.close() # 向操作系统发送请求,要求操作系统关闭打开的文件
 强调:一定要在程序结束前关闭打开的文件

上下文管理with
with open(r'a.txt',encoding='utf-8') as f,\
        open('b.txt',encoding='utf-8') as f1:
    print(f.read())
    print(f1.read())

一 文件的打开模式
    r: 只读模式L(默认的)
        1 当文件不存时,会报错
        2 当文件存在时,文件指针指向文件的开头
    w: 只写模式
        1 当文件不存时,新建一个空文档
        2 当文件存在时,清空文件内容，文件指针跑到文件的开头
    a: 只追加写模式
        1 当文件不存时,新建一个空文档，文件指针跑到文件的末尾
        2 当文件存在时,文件指针跑到文件的末尾
二 两种模式(t模式和b模式)
控制读写文件单位的方式(必须与r\w\a连用)
    t : 文本模式(默认的),一定要指定encoding参数
        优点: 操作系统会将硬盘中二进制数字解码成unicode然后返回
        强调:只针对文本文件有效

    b: 二进制模式,一定不能指定encoding参数
data.decode('utf-8')#解码成utf8
f.readable()#是否可读
f.writable()#是否可写
f.writelines(['egon:123\n','alex:456\n','lxx:lxx123\n'])#写入一串字符
f.readlines())#读多行
