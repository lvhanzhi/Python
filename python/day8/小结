可读可写:
r+t (如果写的话会清空原来的)
w+t (如果写的话会清空原来的)
a+t (不会清空原来的)

光标f.seek
文件内指针移动,只有t模式下的read(n),n代表的字符的个数
除此以外文件内指针的移动都是以字节为单位

f.seek(offset,whence)有两个参数:
offset: 代表控制指针移动的字节数
whence: 代表参照什么位置进行移动
       whence = 0: 参照文件开头(默认的),特殊???,可以在t和b模式下使用
       whence = 1: 参照当前所在的位置,必须在b模式下用
       whence = 2: 参照文件末尾,必须在b模式下用

utf8 中文3个字符,英文1个字符,回车两个字符

f.tell返回现在光标所在的位置

有新增内容则打印出新增的内容:
with open('test.txt','rb')as f:
     f.seek(0,2)
     while True:
          message=f.read()
          if len(message) !=0:
               print(message.decode('utf8'),end='')

文件修改的两种方式:
方式一:
    优点: 在文件修改的过程中硬盘上始终一份数据
    缺点: 占用内存过多,不适用于大文件
    1 将文件内容由硬盘全部读入内存
    2 在内存中完成修改
    3 将内存中修改后的结果覆盖写回硬盘

with open(r'test.txt','r',encoding='utf8')as f:
     info=f.read()
with open(r'test.txt','w',encoding='utf8')as f:
     f.write(info.replace('alax','dsb'))
方式二:
    优点: 同一时刻在内存中只存在源文件的一行内容,不会过多地占用内存
    缺点: 在文件修改的过程中会出现源文件与临时文件共存,硬盘上同一时刻会有两份数据,即在修改的过程中会过多的占用硬盘
    1 以读的方式打开源文件,以写的方式打开一个临时文件
    2 从源文件中每读一样内容修改完毕后写入临时文件,直到源文件读取完毕
    3 删掉源文件,将临时文件重命名为源文件名

import os
with open(r'test.txt','r',encoding='utf8')as read_f,\
     open(r'test.txt.swap','w',encoding='utf8')as write_f:
     for line in read_f:
          line=line.replace('dsb','alax')
          write_f.write(line)
os.remove('test.txt')
os.rename('test.txt.swap','test.txt')

1 什么是函数
    函数就是具备某一功能的工具


2 为什么要用函数
    1  程序的组织结构不清晰,可读性差
    2  代码冗余
    3  可扩展性差

3 如何用函数
    函数的使用必须遵循的原则:先定义,后调用
        修理工事先准备工具的过程即函数的定义
        修理工遇到应用场景拿来工具就用即函数的调用
    语法:
        def 函数名(参数1,参数2,...):
            """
            文档注释
            """
            code1
            code2
            code3
            ......
            return 返回值

        def:定义函数的关键字
        函数名: 就相当于一个变量名,指向函数的内存地址,
                注意:函数的内存地址()就可以出发函数体代码的执行

        参数: 参数是函数的调用者为函数体代码传值的媒介,在python中函数的参数无需声明类型
        """文档注释""" : 推荐写上
        代码块：就是函数体功能的具体实现
        return 返回值 ：函数体代码块运行的成果

函数的使用分为两个阶段：
        定义阶段: 只检测语法，不执行代码
        调用阶段：运行函数体代码
先定义,后调用
定义无参函数：当函数体的代码逻辑不依赖任何传入的值就能执行，就不需要定义参数
定义有参函数：当函数体的代码逻辑依赖于外部调用者传入的值才能执行，必须定义参数用来接收外部传入的值