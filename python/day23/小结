面向对象
面向过程的编程思想:
核心过程二字,过程指的是解决问题的步骤,即先干什么\再干什么\后干什么
    基于该思想编写程序就好比在设计一条流水线,是一种机械式的思维方式
    优点:复杂的问题流程化\进而简单化
    缺点:可扩展性差
面向对象的编程思想
    核心是对象二字,对象是特征与技能的结合体
    基于该思想编写程序(脑子始终想的是对象二字)就好比在创造一个世界,世界是由一个个对象组成,在上帝眼里任何存在的事物都是对象,任何不存在的事物也都可以造出来,是一种上帝式的思维方式
    优点: 可扩展性强
    缺点: 编程的复杂度要高与面向过程
1、类
    对象是特征与技能的结合体，那类就是一系列对象相同的特征与技能的结合体
    强调:
        1.对象是具体存在的事物,而类则一个抽象的概念
        2.站在不同的角度总结出的类与对象是不同的*
    在现实世界中：一定先有对象，后来随着人类文明的发展总结出的类
    在程序中,务必保证：先定义类，后调用类来产生对象
注意：
    定义函数是只检测代码,不执行函数
    在定义类的阶段会立刻执行类体内的代码，会产生一个类名称空间,用来将类体代码执行过程中产生的名字都丢进去
在程序中：必须先定义类 - -----》调用类 - -----》对象

class OldboyStudent:#类
    school='Oldboy'#属性
    def choose_course(self):#方法
        print('is choosing course')
    print('===========>')
#查看类的名称空间
print(OldboyStudent.__dict__)
print(OldboyStudent.__dict__['school'])
print(OldboyStudent.school)#查看类属性
print(OldboyStudent.choose_course)#查看类方法
OldboyStudent.choose_course(1)#调用类方法(self是一个位置形参,必须被传值,否则会报错)
#增
OldboyStudent.country='China'
print(OldboyStudent.country)
#改
OldboyStudent.country='English'
print(OldboyStudent.country)
#删
del OldboyStudent.school
# print(OldboyStudent.school)
总结:
    1.类本质就是一个名称空间,或者说是一个用来存放变量与函数的容器
    2.类的用途之一就是当做名称空间从其内部取出名字来使用
    3.类的用途之二是调用类来产生对象

调用类发生哪些事：
1、首先会产生一个空对象stu1
2、会自动触发类内部的__init__函数
3、然后将空对象stu1连同调用类时括号内的参数组成（stu1,"马冬梅",18,'female'）,将这四个参数一起传给__init__函数(初始化)
调用类的过程称之为类的实例化,调用类的返回值称之为类的一个对象/实例
__init__方法:在调用类/实例化时自动触发,为对象初始化自己独有的特征(注意:不能有返回值)

小结:
属性的查找顺序:先从对象自己的名称空间找,没有则去所属的类中找
1、类的数据属性:是给对象用的，而且直接共享给所有对象用的，内存地址都一样 | 类和对象都可以用,一旦改变自己的数据属性的值,所有的对象都能感知到
2、类的函数属性：也是给对象用，但是绑定给对象用的，绑定到不同的对象就是不同的 | 类也可以用,但是类来调用就是一个普通的函数
绑定方法的特殊之处：
    1、 绑定给谁就应该由谁来调用 2、谁来调用就会把谁当做第一个参数传入
一切皆对象:在python3中统一了类与类型的概念，类即类型
class Foo:
    pass
print(Foo)#<class '__main__.Foo'>
obj=Foo()
print(type(obj))#<class '__main__.Foo'>
print(int)#<class 'int'>
age=10#age=int(10)
print(type(age))#<class 'int'>
------------------------------------
l=[1,2,3]
print(type(l))#<class 'list'>
l.append(4)
print(l)#[1, 2, 3, 4]
list.append(l,4)
print(l)#[1, 2, 3, 4, 4]

一些特殊类的属性:
print(Person.__name__)#Person#查看类的名字(字符串类型)
print(Person.__dict__)#查出的是一个字典
print(dir(Person))#查看类的方法(列表)
print(Person.__module__)#查看类所在的模块(执行文件/模块)
print(Person.__class__)
print(isinstance(hy,Person))#判断对象是否是类的实例

class Person:
    role = '中国人'
    def __init__(self, name, sex):
        self.name = name
        self.sex = sex
    def walk(self):
        print('walking...')
hy=Person('haiyan','female')#类的实例化
#类名() ===>执行Person.__init__()
print(hy.name)#查看属性
print(hy)#返回的是一个对象
hy.walk()#调用方法(用对象去调用类就会自动把该对象当做第一个参数传给__init__的self)

统计实例化次数:
class People:
    count=0
    def __init__(self,name):
        self.name=name
        People.count+=1
egon=People('egon')
print(egon.count)
alex=People('alex')
print(alex.count)

小练习:
class Person:
    def __init__(self,name,attack,life_value):
        self.name=name
        self.attack=attack
        self.life_value=life_value
    def attacking(self):
        dog.life_value=dog.life_value-self.attack
class Dog:
    def __init__(self,name,attack,life_value):
        self.name=name
        self.attack=attack
        self.life_value=life_value
    def attacking(self):
        egon.life_value=egon.life_value-self.attack
egon=Person('egon',20,100)
dog=Dog('dog',10,100)
print('egon的生命',egon.life_value)
print('dog的生命',dog.life_value)
egon.attacking()
print('dog的生命',dog.life_value)
print('egon的生命',egon.life_value)
dog.attacking()
print('egon的生命',egon.life_value)
print('dog的生命',dog.life_value)
